buildscript {
    repositories {
        google()
        jcenter()
        gradlePluginPortal()
        mavenCentral()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    }

    dependencies {
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.11.0"
        classpath 'org.smartregister:gradle-jarjar-plugin:1.0.0-SNAPSHOT'
        classpath 'com.android.tools.build:gradle:4.0.1'
    }
}

plugins {
    id 'java'
    id "com.github.kt3k.coveralls" version "2.8.1"
    id 'jacoco'
}

jacoco {
    toolVersion = '0.8.0'
}

configure(allprojects) { project ->
    buildscript {
        version = VERSION_NAME
        group = GROUP

        repositories {
            jcenter()
            mavenCentral()
            maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
            maven { url "https://s3.amazonaws.com/repo.commonsware.com" }
            mavenLocal()
            google()
        }
    }
}

apply plugin: 'build-dashboard'
apply plugin: 'io.codearte.nexus-staging'

buildDashboard {
    reports.html.setDestination(file("build/"))
}

test.reports.html.enabled = false
test.reports.junitXml.enabled = false

def isReleaseBuild() {
    return version.contains("SNAPSHOT") == false
}

/**
 *  List of modules that don't require Jacoco
 */
def ignoredByJacoco = [
        'sample'
]

project.ext.preDexLibs = !project.hasProperty('disablePreDex')

subprojects { prj ->

    group = 'org.smartregister'

    ext.androidToolsBuildGradle = '4.0.1'
    ext.androidBuildToolsVersion = '29.0.2'
    ext.androidMinSdkVersion = 18
    ext.androidCompileSdkVersion = 29
    ext.androidTargetSdkVersion = 29

    ext.androidAnnotationsVersion = '3.0.1'
    ext.androidAnnotationsAPIVersion = '3.0.1'

    repositories {
        google()
        jcenter()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
        mavenLocal()
        mavenCentral()
        maven { url 'https://jitpack.io' }
        maven { url "http://acra.googlecode.com/svn/repository/releases" }
        maven { url "https://repo.maven.apache.org/maven2" }
        maven { url "http://cloudant.github.io/cloudant-sync-eap/repository" }
        maven { url "https://s3.amazonaws.com/repo.commonsware.com" }
        maven { url 'https://dl.bintray.com/ibm-watson-health/ibm-fhir-server-releases'}

    }

    // Improve build server performance by allowing disabling of pre-dexing
    // (see http://tools.android.com/tech-docs/new-build-system/tips#TOC-Improving-Build-Server-performance.)
    project.plugins.whenPluginAdded { plugin ->
        if ("com.android.build.gradle.AppPlugin".equals(plugin.class.name)) {
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
        } else if ("com.android.build.gradle.LibraryPlugin".equals(plugin.class.name)) {
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
        }
    }

    // Apply Jacoco only if the project is not in the ignore list
    if (!ignoredByJacoco.contains(prj.name)) {

        apply plugin: 'jacoco'

        jacoco {
            toolVersion = '0.8.0'
        }

        task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

            reports {
                xml.enabled = true
                html.enabled = true
            }

            getReports().getXml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"))
            getReports().getHtml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/html"))

            def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*', '**/*$ViewBinder*.*']
            def debugTree = fileTree(dir: "$project.buildDir/intermediates/classes/debug", excludes: fileFilter)
            def mainSrc = "$project.projectDir/src/main/java"

            sourceDirectories.setFrom(files([mainSrc]))
            classDirectories.setFrom(files([debugTree]))

            executionData.setFrom(fileTree(dir: project.buildDir, includes: [
                    'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
            ]))
        }

    }


}

// Only report code coverage for projects that are distributed
def publishedProjects = subprojects.findAll { it.path != ':sample' }

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn publishedProjects.jacocoTestReport

    sourceDirectories.setFrom(files(publishedProjects.jacocoTestReport.sourceDirectories))
    classDirectories.setFrom(files(publishedProjects.jacocoTestReport.classDirectories))
    executionData.setFrom(files(publishedProjects.jacocoTestReport.executionData))

    getReports().getXml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"))
    getReports().getHtml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/html"))

    reports {
        html.enabled = true
        xml.enabled = true
    }

    onlyIf = {
        true
    }

    doFirst {
        executionData = files(executionData.findAll {
            it.exists()
        })
    }
}

coveralls {
    for (int i = 0; i < publishedProjects.jacocoTestReport.sourceDirectories.size(); i++) {
        sourceDirs.add(publishedProjects.jacocoTestReport.sourceDirectories.get(i).getAsPath())
    }

    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
    group = 'Coverage reports'
    description = 'Uploads the aggregated coverage report to Coveralls'
    dependsOn jacocoRootReport
}

